plugins {
    id 'java-library'
    id 'jacoco'
    id 'jvm-test-suite'
    id "com.diffplug.spotless" version "6.23.3"
    id "io.freefair.lombok" version "8.4"
}

group 'org.tframework'
version '0.0.1'

ext {
    slf4jVersion = "1.7.25"
    classGraphVersion = "4.8.165"
    jgraphtVersion = "1.5.2"
    jacksonVersion = "2.16.1"
    junitJupiterVersion = "5.8.2"
    mockitoVersion = "5.8.0"
    log4jVersion = "2.17.2"
}

repositories {
    mavenCentral()
}

dependencies {
    implementation "org.slf4j:slf4j-api:${slf4jVersion}"
    implementation "io.github.classgraph:classgraph:${classGraphVersion}"
    implementation "org.jgrapht:jgrapht-core:${jgraphtVersion}"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:${jacksonVersion}"
}

testing {
    suites {
        //common test configuration that applies to all test suites
        configureEach {
            useJUnitJupiter()
            dependencies {
                implementation project()

                // testing frameworks
                implementation "org.junit.jupiter:junit-jupiter-api:${junitJupiterVersion}"
                runtimeOnly "org.junit.jupiter:junit-jupiter-engine:${junitJupiterVersion}"
                implementation "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
                runtimeOnly "org.junit.jupiter:junit-jupiter-params:${junitJupiterVersion}"
                implementation "org.mockito:mockito-core:${mockitoVersion}"
                implementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"

                //logging during tests
                implementation "org.apache.logging.log4j:log4j-api:${log4jVersion}"
                implementation "org.apache.logging.log4j:log4j-core:${log4jVersion}"
                implementation "org.apache.logging.log4j:log4j-slf4j-impl:${log4jVersion}"
            }
        }

        test {
            testType = TestSuiteType.UNIT_TEST
            dependencies {
            }
            targets {
                all {
                    testTask.configure {
                        // report + coverage check is always generated after tests run
                        finalizedBy("jacocoTestReport")
                    }
                }
            }
        }

        integrationTest(JvmTestSuite) {
            testType = TestSuiteType.INTEGRATION_TEST
            dependencies {
            }
        }

    }
}

//spotless check configuration
spotless {
    format 'misc', {
        // define the files to apply `misc` to
        target '*.gradle', '*.md', '.gitignore'
        // define the steps to apply to those files
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
    }
    java {
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        indentWithSpaces(4)
        endWithNewline()
        licenseHeader '/* Licensed under Apache-2.0 $YEAR. */'
    }
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.required = true
        html.outputLocation = layout.buildDirectory.dir('jacoco-report-html')
    }
    finalizedBy jacocoTestCoverageVerification //coverage is checked after report is generated
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.75
            }
            //these packages have tests in several test suites, so coverage is not easy to measure
            excludes = ["org.tframework.core.properties.parsers"]
        }
    }
}
